# ðŸš€ Install & Import
!pip install tensorflow --quiet

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import (
    Input, Conv2D, MaxPooling2D, Flatten,
    TimeDistributed, LSTM, Dense, Dropout, Reshape
)
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import os

# ðŸ“‚ Mount Google Drive (optional)
from google.colab import drive
drive.mount('/content/drive')

# ðŸ§¹ Paths & Parameters
train_dir = '/content/drive/MyDrive/redrot_dataset/train'  # Replace with your path
val_dir = '/content/drive/MyDrive/redrot_dataset/val'

IMG_HEIGHT = 128
IMG_WIDTH = 128
CHANNELS = 3
NUM_CLASSES = 2  # Healthy, Red Rot
BATCH_SIZE = 32
EPOCHS = 20

# ðŸ“ˆ Data Preprocessing
datagen = ImageDataGenerator(rescale=1./255)

train_gen = datagen.flow_from_directory(
    train_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

val_gen = datagen.flow_from_directory(
    val_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

# ðŸ§  CNN + RNN Model
inputs = Input(shape=(IMG_HEIGHT, IMG_WIDTH, CHANNELS))
x = Conv2D(32, (3, 3), activation='relu', padding='same')(inputs)
x = MaxPooling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = MaxPooling2D((2, 2))(x)

# Reshape feature maps to sequence
shape = x.shape
x = Reshape((shape[1], shape[2] * shape[3]))(x)

x = LSTM(64)(x)
x = Dropout(0.5)(x)
outputs = Dense(NUM_CLASSES, activation='softmax')(x)

model = Model(inputs=inputs, outputs=outputs)
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# ðŸŽ¯ Train Model
history = model.fit(
    train_gen,
    validation_data=val_gen,
    epochs=EPOCHS
)

# ðŸ“Š Plot Accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# ðŸ’¾ Save Model
model.save('/content/drive/MyDrive/redrot_cnn_rnn_model.h5')
print("Model saved to Google Drive.")
